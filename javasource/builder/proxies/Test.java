// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package builder.proxies;

public class Test extends quizapp.proxies.RemoteObject
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Builder.Test";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		TestId("TestId"),
		TestName("TestName"),
		_Id("_Id"),
		CustomCreatedDate("CustomCreatedDate"),
		CustomChangedDate("CustomChangedDate"),
		CustomCreatedDateAsLong("CustomCreatedDateAsLong"),
		CustomChangedDateAsLong("CustomChangedDateAsLong"),
		Test_Lecture("Builder.Test_Lecture"),
		RemoteObject_Account_CreatedBy("QuizApp.RemoteObject_Account_CreatedBy"),
		RemoteObject_Account_ChangedBy("QuizApp.RemoteObject_Account_ChangedBy");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Test(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Test(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject testMendixObject)
	{
		super(context, testMendixObject);
		if (!com.mendix.core.Core.isSubClassOf(entityName, testMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static builder.proxies.Test initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new builder.proxies.Test(context, mendixObject);
	}

	public static builder.proxies.Test load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return builder.proxies.Test.initialize(context, mendixObject);
	}

	public static java.util.List<builder.proxies.Test> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> builder.proxies.Test.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of TestId
	 */
	public final java.lang.Long getTestId()
	{
		return getTestId(getContext());
	}

	/**
	 * @param context
	 * @return value of TestId
	 */
	public final java.lang.Long getTestId(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames.TestId.toString());
	}

	/**
	 * Set value of TestId
	 * @param testid
	 */
	public final void setTestId(java.lang.Long testid)
	{
		setTestId(getContext(), testid);
	}

	/**
	 * Set value of TestId
	 * @param context
	 * @param testid
	 */
	public final void setTestId(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long testid)
	{
		getMendixObject().setValue(context, MemberNames.TestId.toString(), testid);
	}

	/**
	 * @return value of TestName
	 */
	public final java.lang.String getTestName()
	{
		return getTestName(getContext());
	}

	/**
	 * @param context
	 * @return value of TestName
	 */
	public final java.lang.String getTestName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.TestName.toString());
	}

	/**
	 * Set value of TestName
	 * @param testname
	 */
	public final void setTestName(java.lang.String testname)
	{
		setTestName(getContext(), testname);
	}

	/**
	 * Set value of TestName
	 * @param context
	 * @param testname
	 */
	public final void setTestName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String testname)
	{
		getMendixObject().setValue(context, MemberNames.TestName.toString(), testname);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Test_Lecture
	 */
	public final builder.proxies.Lecture getTest_Lecture() throws com.mendix.core.CoreException
	{
		return getTest_Lecture(getContext());
	}

	/**
	 * @param context
	 * @return value of Test_Lecture
	 * @throws com.mendix.core.CoreException
	 */
	public final builder.proxies.Lecture getTest_Lecture(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		builder.proxies.Lecture result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Test_Lecture.toString());
		if (identifier != null) {
			result = builder.proxies.Lecture.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Test_Lecture
	 * @param test_lecture
	 */
	public final void setTest_Lecture(builder.proxies.Lecture test_lecture)
	{
		setTest_Lecture(getContext(), test_lecture);
	}

	/**
	 * Set value of Test_Lecture
	 * @param context
	 * @param test_lecture
	 */
	public final void setTest_Lecture(com.mendix.systemwideinterfaces.core.IContext context, builder.proxies.Lecture test_lecture)
	{
		if (test_lecture == null) {
			getMendixObject().setValue(context, MemberNames.Test_Lecture.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Test_Lecture.toString(), test_lecture.getMendixObject().getId());
		}
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final builder.proxies.Test that = (builder.proxies.Test) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
