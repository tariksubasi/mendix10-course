// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package builder.proxies;

public class TestBuilderHelper implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject testBuilderHelperMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Builder.TestBuilderHelper";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ShowBuilder("ShowBuilder"),
		ActiveQuestionSort("ActiveQuestionSort"),
		TestBuilderHelper_Test("Builder.TestBuilderHelper_Test"),
		TestBuilderHelper_ConnectedSelector("Builder.TestBuilderHelper_ConnectedSelector");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public TestBuilderHelper(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected TestBuilderHelper(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject testBuilderHelperMendixObject)
	{
		if (testBuilderHelperMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, testBuilderHelperMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.testBuilderHelperMendixObject = testBuilderHelperMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static builder.proxies.TestBuilderHelper initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new builder.proxies.TestBuilderHelper(context, mendixObject);
	}

	public static builder.proxies.TestBuilderHelper load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return builder.proxies.TestBuilderHelper.initialize(context, mendixObject);
	}

	/**
	 * @return value of ShowBuilder
	 */
	public final java.lang.Boolean getShowBuilder()
	{
		return getShowBuilder(getContext());
	}

	/**
	 * @param context
	 * @return value of ShowBuilder
	 */
	public final java.lang.Boolean getShowBuilder(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.ShowBuilder.toString());
	}

	/**
	 * Set value of ShowBuilder
	 * @param showbuilder
	 */
	public final void setShowBuilder(java.lang.Boolean showbuilder)
	{
		setShowBuilder(getContext(), showbuilder);
	}

	/**
	 * Set value of ShowBuilder
	 * @param context
	 * @param showbuilder
	 */
	public final void setShowBuilder(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean showbuilder)
	{
		getMendixObject().setValue(context, MemberNames.ShowBuilder.toString(), showbuilder);
	}

	/**
	 * @return value of ActiveQuestionSort
	 */
	public final java.lang.Integer getActiveQuestionSort()
	{
		return getActiveQuestionSort(getContext());
	}

	/**
	 * @param context
	 * @return value of ActiveQuestionSort
	 */
	public final java.lang.Integer getActiveQuestionSort(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.ActiveQuestionSort.toString());
	}

	/**
	 * Set value of ActiveQuestionSort
	 * @param activequestionsort
	 */
	public final void setActiveQuestionSort(java.lang.Integer activequestionsort)
	{
		setActiveQuestionSort(getContext(), activequestionsort);
	}

	/**
	 * Set value of ActiveQuestionSort
	 * @param context
	 * @param activequestionsort
	 */
	public final void setActiveQuestionSort(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer activequestionsort)
	{
		getMendixObject().setValue(context, MemberNames.ActiveQuestionSort.toString(), activequestionsort);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of TestBuilderHelper_Test
	 */
	public final builder.proxies.Test getTestBuilderHelper_Test() throws com.mendix.core.CoreException
	{
		return getTestBuilderHelper_Test(getContext());
	}

	/**
	 * @param context
	 * @return value of TestBuilderHelper_Test
	 * @throws com.mendix.core.CoreException
	 */
	public final builder.proxies.Test getTestBuilderHelper_Test(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		builder.proxies.Test result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.TestBuilderHelper_Test.toString());
		if (identifier != null) {
			result = builder.proxies.Test.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of TestBuilderHelper_Test
	 * @param testbuilderhelper_test
	 */
	public final void setTestBuilderHelper_Test(builder.proxies.Test testbuilderhelper_test)
	{
		setTestBuilderHelper_Test(getContext(), testbuilderhelper_test);
	}

	/**
	 * Set value of TestBuilderHelper_Test
	 * @param context
	 * @param testbuilderhelper_test
	 */
	public final void setTestBuilderHelper_Test(com.mendix.systemwideinterfaces.core.IContext context, builder.proxies.Test testbuilderhelper_test)
	{
		if (testbuilderhelper_test == null) {
			getMendixObject().setValue(context, MemberNames.TestBuilderHelper_Test.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.TestBuilderHelper_Test.toString(), testbuilderhelper_test.getMendixObject().getId());
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of TestBuilderHelper_ConnectedSelector
	 */
	public final builder.proxies.ConnectedSelector getTestBuilderHelper_ConnectedSelector() throws com.mendix.core.CoreException
	{
		return getTestBuilderHelper_ConnectedSelector(getContext());
	}

	/**
	 * @param context
	 * @return value of TestBuilderHelper_ConnectedSelector
	 * @throws com.mendix.core.CoreException
	 */
	public final builder.proxies.ConnectedSelector getTestBuilderHelper_ConnectedSelector(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		builder.proxies.ConnectedSelector result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.TestBuilderHelper_ConnectedSelector.toString());
		if (identifier != null) {
			result = builder.proxies.ConnectedSelector.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of TestBuilderHelper_ConnectedSelector
	 * @param testbuilderhelper_connectedselector
	 */
	public final void setTestBuilderHelper_ConnectedSelector(builder.proxies.ConnectedSelector testbuilderhelper_connectedselector)
	{
		setTestBuilderHelper_ConnectedSelector(getContext(), testbuilderhelper_connectedselector);
	}

	/**
	 * Set value of TestBuilderHelper_ConnectedSelector
	 * @param context
	 * @param testbuilderhelper_connectedselector
	 */
	public final void setTestBuilderHelper_ConnectedSelector(com.mendix.systemwideinterfaces.core.IContext context, builder.proxies.ConnectedSelector testbuilderhelper_connectedselector)
	{
		if (testbuilderhelper_connectedselector == null) {
			getMendixObject().setValue(context, MemberNames.TestBuilderHelper_ConnectedSelector.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.TestBuilderHelper_ConnectedSelector.toString(), testbuilderhelper_connectedselector.getMendixObject().getId());
		}
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return testBuilderHelperMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final builder.proxies.TestBuilderHelper that = (builder.proxies.TestBuilderHelper) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
